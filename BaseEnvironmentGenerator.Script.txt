#RequireContext CMapEditorPlugin

/**
* Made by ATN04 and jovenium 
* Manchot
*/

#Include "MathLib" as ML
#Include "TextLib" as TL

// Bigbang1112 libs : https://github.com/BigBang1112/universe-library-set
#Include "Libs/BigBang1112/Http.Script.txt" as Http

#Setting S_NumLines 0
#Setting S_API_OctaveCount 4 //4
#Setting S_API_Amplitude 0.1 //0.1
#Setting S_API_Persistence 0.2 //0.2
#Setting S_WaterLevel 20 //20
#Setting S_GrassMaxLevel 24 //24
#Setting S_MinY 0
#Setting S_MidYFromGroundLevel 15

//github project by AndyShora : https://github.com/andyshora/perlin-noise-api
#Const C_UrlBase "http://noise.shora.net/noise/"


Real[][] GetPerlinByAPI(Integer _x, Integer _z){
	declare Text Url = C_UrlBase ^ _x ^ "/" ^ _z;
	Url ^= "?octaveCount="^S_API_OctaveCount^"&amplitude="^S_API_Amplitude^"&persistence="^S_API_Persistence;
	declare Text Response = Http::SyncGET_Result(Url);
	Response = TL:: Replace(Response, "[", "");//remove [ and ] from the response
	Response = TL:: Replace(Response, "]", "");
	declare Real[][] PerlinMap;
	declare Real[] tmp;
	declare Text[] RealValues = TL::Split(",", Response);
	foreach(Value in RealValues){
		if(tmp.count == _z){
			PerlinMap.add(tmp);
			tmp.clear();
		}
		tmp.add(TL::ToReal(Value));
	}
	PerlinMap.add(tmp);
	return PerlinMap;
}

CBlockModel GetBlockModel(Integer _y){
	declare Text BockName;
	if(_y < S_WaterLevel){
		BockName = "PlatformWaterBase";//water plate
	}else if(_y <= S_GrassMaxLevel){
		BockName = "DecoPlatformBase";//grass plate
	}else{
		BockName = "DecoPlatformIceBase";//snow plate
	}
	foreach(b in BlockModels){
		if(b.Name == BockName){
			return b;
		}
	}	
	return Null; 
}

CBlockModel GetWaterBlock(){
	foreach(b in BlockModels){
		if(b.Name == "DecoWallWaterBase"){//PoolBlock
			return b;
		}
	}	
	return Null; 
}

Void PlacerBlock(Integer _x, Integer _y, Integer _z, CBlockModel _block){
	if(_block.Name == "PlatformWaterBase"){
		declare CBlockModel WaterBlock = GetWaterBlock();
		for(i, _y, S_WaterLevel - 1){
			PlaceBlock(WaterBlock, <_x, i, _z>, ::CardinalDirections::North);
		}
		PlaceBlock(_block, <_x, S_WaterLevel, _z>, ::CardinalDirections::North);
	}else{
		PlaceBlock(_block, <_x, _y, _z>, ::CardinalDirections::North);
	}
}

main(){

	declare Int3 mapSize = Map.Size;
	declare CBlockModel block;
	declare Real[][] MapNoise;//noise map
	declare Real[] tmp;
	declare Integer MaxNumLines = mapSize[0];
	
	RemoveAll();
	
	if(S_NumLines != 0)	MaxNumLines = S_NumLines;
	
	MapNoise = GetPerlinByAPI(mapSize[0], mapSize[2]);

	for(i, 0, mapSize[0] - 1){
		for(j, 0, mapSize[2] - 1){
			block = GetBlockModel(ML::FloorInteger((MapNoise[i][j] + 1) * S_MidYFromGroundLevel + S_MinY));
			PlacerBlock(i, ML::FloorInteger((MapNoise[i][j] + 1) * S_MidYFromGroundLevel + S_MinY), j, block);
			if(j % 50 == 0){
				yield;
			}
		}
		if(i + 1 == S_NumLines){
			break;
		}
		yield;
	}	
	
}
